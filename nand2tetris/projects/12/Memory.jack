// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Memory.jack

/**
 * Memory operations library.
 */ 
class Memory {
	static int free;
	static Array memory;

    /** Initializes memory parameters. */
    function void init() {
    	/* Create a Jack-level "proxy" of the RAM */
    	let memory = 0;
    	
    	/* Set free to the base of the Heap (2048-16383) */
    	let free = 2048;
    	
    	return ;
    }

    /** Returns the value of the main memory at the given address. */
    function int peek(int address) {
    	return memory[address];
    }

    /** Sets the value of the main memory at this address
     *  to the given value. */
    function void poke(int address, int value) {
    	let memory[address] = value;
    	
    	return ;
    }

    /** finds and allocates from the heap a memory block of the 
     *  specified size and returns a reference to its base address. */
    function int alloc(int size) {
    	var int pointer;
    	
    	/* ERR5 : Memory.alloc - Allocated memory size must be positive */
    	if(size < 0)
    	{
    		do Sys.error(5);
    	}
    	
    	let pointer = free;
    	let free = free + size;
    	
    	/* ERR6 : Memory.alloc Heap overflow (Heap : 2048 -> 16383) */
    	if(free > 16383)
    	{
    		do Sys.error(6);
    	}
    	
    	return pointer;
    }

    /** De-allocates the given object and frees its space. */
    function void deAlloc(int object) {
    	return ;
    }    
}
