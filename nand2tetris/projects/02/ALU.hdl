// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/02/ALU.hdl

/**
 * The ALU. Computes one of the following functions:
 * x+y, x-y, y-x, 0, 1, -1, x, y, -x, -y, !x, !y,
 * x+1, y+1, x-1, y-1, x&y, x|y on two 16-bit inputs, 
 * according to 6 input bits denoted zx,nx,zy,ny,f,no.
 * The bit-combinations that yield each function are 
 * documented in the book. In addition, the ALU 
 * computes two 1-bit outputs: if the ALU output
 * is 0, zr is set to 1; otherwise zr is set to 0;
 * If out<0, ng is set to 1; otherwise ng is set to 0.
 */

// Implementation: the ALU manipulates the x and y
// inputs and then operates on the resulting values, 
// as follows:
// if (zx==1) set x = 0        // 16-bit constant
// if (nx==1) set x = ~x       // bitwise "not"
// if (zy==1) set y = 0        // 16-bit constant
// if (ny==1) set y = ~y       // bitwise "not"
// if (f==1)  set out = x + y  // integer 2's complement addition
// if (f==0)  set out = x & y  // bitwise "and"
// if (no==1) set out = ~out   // bitwise "not"
// if (out==0) set zr = 1
// if (out<0) set ng = 1

  
CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute  out = x + y (if 1) or out = x & y (if 0)
        no; // negate the out output?

    OUT 
        out[16], // 16-bit output
        zr, // 1 if (out==0), 0 otherwise
        ng; // 1 if (out<0),  0 otherwise

    PARTS:
    
    /* If zx = 1, x = false (0000000000000000) */
    Mux16(a = x, b = false, sel = zx, out = outZX);


    /* If nx = 1, x = ~x (~x -> Not(x)) */
    Not16(in = outZX, out = notX);
    Mux16(a = outZX, b = notX, sel = nx, out = outNX);


    /* If zy = 1, y = false (0000000000000000) */
    Mux16(a = y, b = false, sel = zy, out = outZY);


    /* If ny = 1, y = ~y (~y -> Not(y)) */
    Not16(in = outZY, out = notY);
    Mux16(a = outZY, b = notY, sel = ny, out = outNY);


    /* If f = 1, out = x + y */
    /* If f = 0, out = x & y */
    Add16(a = outNX, b = outNY, out = sumXY);
    And16(a = outNX, b = outNY, out = andXY);
    Mux16(a = andXY, b = sumXY, sel = f, out = outF);

    
    /* If no = 1, out = ~out (~out -> Not(out)) */
    Not16(in = outF, out = notOut);
    Mux16(a = outF, b = notOut, sel = no, out = outNO);


    /* Copy the final result in out (so we can do other test
    with it) */
    Mux16(a = outNO, b = true, sel = false, out = out);


    /* If out = 0, zr = 1 */
    /* If there is a 1 in outNO, Or16Way return 1 */
    Or16Way(in = outNO, out = isOutNegative);
    /* Inverse the output of Or16Way */
    Not(in = isOutNegative, out = zr);


    /* If out  < 0, ng = 1 */
    /* Test if the 15th bit is 1 or 0 (if it is 1, the number is
    negative, else it is positive) */
    IsNegative16(in = outNO, out = ng);
}
